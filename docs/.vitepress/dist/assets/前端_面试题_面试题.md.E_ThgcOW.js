import{_ as l,c as i,o as e,V as a}from"./chunks/framework.BbAbY5cn.js";const f=JSON.parse('{"title":"面试题","description":"","frontmatter":{},"headers":[{"level":2,"title":"输入一个网址后发生了什么","slug":"输入一个网址后发生了什么","link":"#输入一个网址后发生了什么","children":[]},{"level":2,"title":"XSS 和 CSRF","slug":"xss-和-csrf","link":"#xss-和-csrf","children":[]},{"level":2,"title":"HTTP 缓存","slug":"http-缓存","link":"#http-缓存","children":[{"level":3,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]}]},{"level":2,"title":"HTTP 常见的状态码有哪些，适用场景","slug":"http-常见的状态码有哪些-适用场景","link":"#http-常见的状态码有哪些-适用场景","children":[{"level":3,"title":"1xx(代表请求已被接受，需要继续处理)","slug":"_1xx-代表请求已被接受-需要继续处理","link":"#_1xx-代表请求已被接受-需要继续处理","children":[]},{"level":3,"title":"2xx(代表请求已成功被服务器接收、理解、并接受)","slug":"_2xx-代表请求已成功被服务器接收、理解、并接受","link":"#_2xx-代表请求已成功被服务器接收、理解、并接受","children":[]},{"level":3,"title":"3xx(表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向)","slug":"_3xx-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向","link":"#_3xx-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向","children":[]},{"level":3,"title":"4xx(代表了客户端看起来可能发生了错误，妨碍了服务器的处理)","slug":"_4xx-代表了客户端看起来可能发生了错误-妨碍了服务器的处理","link":"#_4xx-代表了客户端看起来可能发生了错误-妨碍了服务器的处理","children":[]},{"level":3,"title":"5xx(表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生)","slug":"_5xx-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生","link":"#_5xx-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生","children":[]}]}],"relativePath":"前端/面试题/面试题.md","filePath":"前端/面试题/面试题.md"}'),t={name:"前端/面试题/面试题.md"},r=a('<h1 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h1><h2 id="输入一个网址后发生了什么" tabindex="-1">输入一个网址后发生了什么 <a class="header-anchor" href="#输入一个网址后发生了什么" aria-label="Permalink to &quot;输入一个网址后发生了什么&quot;">​</a></h2><ol><li>DNS 解析(浏览器缓存=&gt;操作系统缓存=&gt;路由器缓存=&gt;本地(ISP)域名服务器缓存=&gt;根域名服务器)</li><li>tcp 连接(浏览器得到 IP 后，向服务器发送 TCP 连接，进行三次握手)</li><li>浏览器发送 HTTP 请求</li><li>服务器处理请求</li><li>浏览器解析渲染页面 <ul><li>浏览器显示 HTML</li><li>浏览器向服务器发送请求获取嵌入在 HTML 中的对象(如图片、视频、css、js)</li><li>浏览器发送异步(AJAX)请求</li></ul></li><li>关闭 TCP 连接（断开可以分为主动关闭和被动关闭，需要经过 4 次挥手）</li></ol><h2 id="xss-和-csrf" tabindex="-1">XSS 和 CSRF <a class="header-anchor" href="#xss-和-csrf" aria-label="Permalink to &quot;XSS 和 CSRF&quot;">​</a></h2><p>CSRG 和 XSS 都是客户端攻击，他们滥用同源策略，利用 web 应用程序和受害用户之间的信任关系。XSS 和跨站脚本攻击允许攻击者破坏合法用户与任何易受攻击的应用程序的交互</p><ul><li>XSS 攻击主要分为三类：存储型 XSS 攻击、持久型 XSS、Type-I XSS 在存储式跨站攻击中，<strong>注入的恶意代码将永久地存储在易受攻击的 web 应用程序的不同组件中,如数据库、评论字段、访客日志、消息论坛等</strong>。每当客户端访问受感染网站或想 web 服务器发起请求时，该请求就会在用户的浏览器中执行恶意脚本</li><li>跨站点请求伪造(CSRF)也称一键式攻击，是一种 web 应用程序网络攻击，可诱使受害者在不知不觉中代表攻击者执行操作。CSRF 攻击 web 应用程序中的一个安全漏洞，该漏洞无法区分经过身份验证的用户会话中错误请求和合法请求<br><strong>攻击者通常使用社会工程技术发起 CSRF 攻击，以诱骗受害者用户加载页面或单击包含恶意请求的链接。该链接从经过身份验证的用户的浏览器向目标网站发送恶意请求</strong>。对大多数网站，浏览器请求本质上报错会话信息，例如 cookie、有效令牌或网站与用户关联的登录凭据。如果经过身份验证的用户已经与目标网站处于活动会话中，则站点会将新的恶意请求视为来自用户的有效请求并执行它 <ul><li>CSRF 攻击类型：登录 CSRF 攻击、存储 CSRF 攻击</li></ul></li></ul><h2 id="http-缓存" tabindex="-1">HTTP 缓存 <a class="header-anchor" href="#http-缓存" aria-label="Permalink to &quot;HTTP 缓存&quot;">​</a></h2><p>HTTP 缓存分为 2 种，一种是强缓存，另一种是协商缓存。主要作用是可以加快资源获取速度，提升用户体验，减少网络传输，缓解服务器的压力。</p><h3 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h3><p>不需要发送请求到服务器，直接读取浏览器本地缓存。在 Chrome 中，强缓存又分为 Disk Cache（存放在硬盘中）和 Memory Cache（存放在内存中），存放的位置是由浏览器控制的。是否强缓存由 Expires、Cache-Control 和 Pragma 3 个 Header 属性共同来控制。</p><ul><li>Expires: Expires 的值是一个 HTTP 日期，在浏览器发起请求时，会根据系统时间和 Expires 的值进行比较，如果系统时间超过了 Expires 的值，缓存失效。由于和系统时间进行比较，所以当系统时间和服务器时间不一致的时候，会有缓存有效期不准的问题。Expires 的优先级在三个 Header 属性中是最低的</li><li>Cache-Control: Cache-Control 是 HTTP/1.1 中新增的属性，在请求头和响应头中都可以使用，常用的属性值如有： <ul><li>max-age：单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效</li><li>no-cache：不使用强缓存，需要与服务器验证缓存是否新鲜</li><li>no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源</li><li>private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应</li><li>public：响应可以被中间代理、CDN 等缓存</li><li>must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证</li></ul></li><li>Pragma: Pragma 只有一个属性值，就是 no-cache ，效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高</li></ul><h3 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h3><p>当浏览器的强缓存失效的时候或者请求头中设置了不走强缓存，并且在请求头中设置了 If-Modified-Since 或者 If-None-Match 的时候，会将这两个属性值到服务端去验证是否命中协商缓存，如果命中了协商缓存，会返回 304 状态，加载浏览器缓存，并且响应头会设置 Last-Modified 或者 ETag</p><ul><li>ETag/If-None-Match: ETag/If-None-Match 的值是一串 hash 码，代表的是一个资源的标识符，当服务端的文件变化的时候，它的 hash 码会随之改变，通过请求头中的 If-None-Match 和当前文件的 hash 值进行比较，如果相等则表示命中协商缓存。ETag 又有强弱校验之分，如果 hash 码是以 &quot;W/&quot; 开头的一串字符串，说明此时协商缓存的校验是弱校验的，只有服务器上的文件差异（根据 ETag 计算方式来决定）达到能够触发 hash 值后缀变化的时候，才会真正地请求资源，否则返回 304 并加载浏览器缓存</li><li>Last-Modified/If-Modified-Since: Last-Modified/If-Modified-Since 的值代表的是文件的最后修改时间，第一次请求服务端会把资源的最后修改时间放到 Last-Modified 响应头中，第二次发起请求的时候，请求头会带上上一次响应头中的 Last-Modified 的时间，并放到 If-Modified-Since 请求头属性中，服务端根据文件最后一次修改时间和 If-Modified-Since 的值进行比较，如果相等，返回 304 ，并加载浏览器缓存</li></ul><h2 id="http-常见的状态码有哪些-适用场景" tabindex="-1">HTTP 常见的状态码有哪些，适用场景 <a class="header-anchor" href="#http-常见的状态码有哪些-适用场景" aria-label="Permalink to &quot;HTTP 常见的状态码有哪些，适用场景&quot;">​</a></h2><p><code>http</code>状态码的作用是告诉客户端当前响应的状态，通过状态码就能判断和分析服务器的运行状态<br> 状态码的第一位数字决定了不同的响应状态，如下</p><ul><li>1 表示消息</li><li>2 表示成功</li><li>3 表示重定向</li><li>4 表示请求错误</li><li>5 表示服务器错误</li></ul><h3 id="_1xx-代表请求已被接受-需要继续处理" tabindex="-1">1xx(代表请求已被接受，需要继续处理) <a class="header-anchor" href="#_1xx-代表请求已被接受-需要继续处理" aria-label="Permalink to &quot;1xx(代表请求已被接受，需要继续处理)&quot;">​</a></h3><ul><li>100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应</li><li>101：服务器根据客户端的请求切换协议，主要用于 websocket 或 http2 升级</li></ul><h3 id="_2xx-代表请求已成功被服务器接收、理解、并接受" tabindex="-1">2xx(代表请求已成功被服务器接收、理解、并接受) <a class="header-anchor" href="#_2xx-代表请求已成功被服务器接收、理解、并接受" aria-label="Permalink to &quot;2xx(代表请求已成功被服务器接收、理解、并接受)&quot;">​</a></h3><ul><li>200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回</li><li>201（已创建）：请求成功并且服务器创建了新的资源</li><li>202（已创建）：服务器已经接收请求，但尚未处理</li><li>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源</li><li>204（无内容）：服务器成功处理请求，但没有返回任何内容</li><li>205（重置内容）：服务器成功处理请求，但没有返回任何内容</li><li>206（部分内容）：服务器成功处理了部分请求</li></ul><h3 id="_3xx-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向" tabindex="-1">3xx(表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向) <a class="header-anchor" href="#_3xx-表示要完成请求-需要进一步操作。-通常-这些状态代码用来重定向" aria-label="Permalink to &quot;3xx(表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向)&quot;">​</a></h3><ul><li>300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择</li><li>301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</li><li>302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</li><li>305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理</li><li>307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li></ul><h3 id="_4xx-代表了客户端看起来可能发生了错误-妨碍了服务器的处理" tabindex="-1">4xx(代表了客户端看起来可能发生了错误，妨碍了服务器的处理) <a class="header-anchor" href="#_4xx-代表了客户端看起来可能发生了错误-妨碍了服务器的处理" aria-label="Permalink to &quot;4xx(代表了客户端看起来可能发生了错误，妨碍了服务器的处理)&quot;">​</a></h3><ul><li>400（错误请求）： 服务器不理解请求的语法</li><li>401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）： 服务器拒绝请求</li><li>404（未找到）： 服务器找不到请求的网页</li><li>405（方法禁用）： 禁用请求中指定的方法</li><li>406（不接受）： 无法使用请求的内容特性响应请求的网页</li><li>407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408（请求超时）： 服务器等候请求时发生超时</li></ul><h3 id="_5xx-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生" tabindex="-1">5xx(表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生) <a class="header-anchor" href="#_5xx-表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生" aria-label="Permalink to &quot;5xx(表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生)&quot;">​</a></h3><ul><li>500（服务器内部错误）：服务器遇到错误，无法完成请求</li><li>501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应</li><li>503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本</li></ul>',27),o=[r];function h(n,s,x,c,d,u){return e(),i("div",null,o)}const T=l(t,[["render",h]]);export{f as __pageData,T as default};
