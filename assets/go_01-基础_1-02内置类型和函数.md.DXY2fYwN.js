import{_ as t,c as e,o as a,a4 as i}from"./chunks/framework.DdZcq5U1.js";const m=JSON.parse('{"title":"内置类型和函数","description":"","frontmatter":{},"headers":[{"level":2,"title":"内置类型","slug":"内置类型","link":"#内置类型","children":[{"level":3,"title":"值类型","slug":"值类型","link":"#值类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]}]},{"level":2,"title":"内置函数","slug":"内置函数","link":"#内置函数","children":[]},{"level":2,"title":"内置接口error","slug":"内置接口error","link":"#内置接口error","children":[]}],"relativePath":"go/01-基础/1-02内置类型和函数.md","filePath":"go/01-基础/1-02内置类型和函数.md"}'),r={name:"go/01-基础/1-02内置类型和函数.md"},l=i(`<h1 id="内置类型和函数" tabindex="-1">内置类型和函数 <a class="header-anchor" href="#内置类型和函数" aria-label="Permalink to &quot;内置类型和函数&quot;">​</a></h1><h2 id="内置类型" tabindex="-1">内置类型 <a class="header-anchor" href="#内置类型" aria-label="Permalink to &quot;内置类型&quot;">​</a></h2><h3 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">​</a></h3><ul><li>bool</li><li>int(32 or 64), int8, int16, int32, int64</li><li>uint(32 or 64), uint8(byte), uint16, uint32, uint64</li><li>float32, float64</li><li>string</li><li>complex64, complex128</li><li>array -- 固定长度的数组</li></ul><h3 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h3><ul><li>slice -- 序列数组(最常用)</li><li>map -- 映射</li><li>chan -- 管道</li></ul><h2 id="内置函数" tabindex="-1">内置函数 <a class="header-anchor" href="#内置函数" aria-label="Permalink to &quot;内置函数&quot;">​</a></h2><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p><table tabindex="0"><thead><tr><th>函数/方法</th><th>描述</th></tr></thead><tbody><tr><td><code>append</code></td><td>用来追加元素到数组、slice中，返回修改后的数组、slice</td></tr><tr><td><code>close</code></td><td>主要用来关闭channel</td></tr><tr><td><code>delete</code></td><td>从map中删除key对应的value</td></tr><tr><td><code>panic</code></td><td>停止常规的goroutine（panic和recover：用来做错误处理）</td></tr><tr><td><code>recover</code></td><td>允许程序定义goroutine的panic动作</td></tr><tr><td><code>imag</code></td><td>返回complex的实部（complex、real imag：用于创建和操作复数）</td></tr><tr><td><code>real</code></td><td>返回complex的虚部</td></tr><tr><td><code>make</code></td><td>用来分配内存，返回Type本身（只能应用于slice、map、channel）</td></tr><tr><td><code>new</code></td><td>用来分配内存，主要用来分配值类型，比如int、struct等，返回指向Type的指针</td></tr><tr><td><code>cap</code></td><td>用于返回某个类型的最大容量（只能用于切片和map）</td></tr><tr><td><code>copy</code></td><td>用于复制和连接slice，返回复制的数目</td></tr><tr><td><code>len</code></td><td>用来求长度，比如string、array、slice、map、channel，返回长度</td></tr><tr><td><code>print</code>、<code>println</code></td><td>底层打印函数，在部署环境中建议使用<code>fmt</code>包</td></tr></tbody></table><h2 id="内置接口error" tabindex="-1">内置接口error <a class="header-anchor" href="#内置接口error" aria-label="Permalink to &quot;内置接口error&quot;">​</a></h2><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//只要实现了Error()函数，返回值为String的都实现了err接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()    </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,11),d=[l];function n(s,o,c,h,p,u){return a(),e("div",null,d)}const _=t(r,[["render",n]]);export{m as __pageData,_ as default};
