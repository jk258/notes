import{_ as t,c as e,o as s,V as i}from"./chunks/framework.jEbjPO8a.js";const y=JSON.parse('{"title":"数据结构","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"数字类型","slug":"数字类型","link":"#数字类型","children":[]},{"level":3,"title":"Bool(布尔值)","slug":"bool-布尔值","link":"#bool-布尔值","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":3,"title":"tuple(元组)","slug":"tuple-元组","link":"#tuple-元组","children":[]},{"level":3,"title":"dict(字典)","slug":"dict-字典","link":"#dict-字典","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]}]},{"level":2,"title":"数据类型判断(type())","slug":"数据类型判断-type","link":"#数据类型判断-type","children":[]},{"level":2,"title":"Python 数据类型转换","slug":"python-数据类型转换","link":"#python-数据类型转换","children":[]}],"relativePath":"python/1-基础教程/1.2.0数据结构.md","filePath":"python/1-基础教程/1.2.0数据结构.md"}'),l={name:"python/1-基础教程/1.2.0数据结构.md"},a=i(`<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="数字类型" tabindex="-1">数字类型 <a class="header-anchor" href="#数字类型" aria-label="Permalink to &quot;数字类型&quot;">​</a></h3><ul><li>int（有符号整型）</li><li>long（长整型，也可以代表八进制和十六进制），长整型也可以使用小写 l，但是还是建议您使用大写 L，避免与数字 1 混淆。Python 使用 L 来显示长整型，例: <code>51924361L</code></li><li>float（浮点型）</li><li>complex（复数），复数由实数部分和虚数部分构成，可以用 <code>a + bj</code>,或者 <code>complex(a,b)</code> 表示， 复数的实部 a 和虚部 b 都是浮点型。,例: <code>3.14j</code></li></ul><h3 id="bool-布尔值" tabindex="-1">Bool(布尔值) <a class="header-anchor" href="#bool-布尔值" aria-label="Permalink to &quot;Bool(布尔值)&quot;">​</a></h3><p>Python 中的布尔值是<code>True</code>和<code>False</code>，它们必须以大写字母开头才能被识别为布尔值</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bool&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bool&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="列表" tabindex="-1">列表 <a class="header-anchor" href="#列表" aria-label="Permalink to &quot;列表&quot;">​</a></h3><p>使用方括号<code>[]</code>，元素之间用逗号分隔</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>嵌套列表<code>[1, [2, 3, 4], [5, 6, 7], 3.4]</code></li><li>列表长度(len)，<code>len([1, 2, 3, 4, 5])</code>等于 5</li><li>更新列表中的值<code>&lt;list_variable&gt;[&lt;index&gt;] = &lt;value&gt;</code></li><li>将值添加到列表<code>.append()</code></li><li>从列表中删除一个值<code>.remove()</code><br> ps：只会删除第一次出现的元素</li></ul><h3 id="tuple-元组" tabindex="-1">tuple(元组) <a class="header-anchor" href="#tuple-元组" aria-label="Permalink to &quot;tuple(元组)&quot;">​</a></h3><p>定义元组使用括号<code>()</code>并用逗号分隔元素，如<code>(1,2,3)</code>,元组是不可变的。它们无法修改</p><ul><li>元组长度<code>len()</code></li><li>元组分配，可以为同一行上的多个变量赋值，如下</li></ul><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a,b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b,a </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#a=2 b=1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="dict-字典" tabindex="-1">dict(字典) <a class="header-anchor" href="#dict-字典" aria-label="Permalink to &quot;dict(字典)&quot;">​</a></h3><p>使用大括号{}并用逗号分隔键值对，如<code>{&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3}</code>,字典的键必须是不可变的数据类型。例如，它们可以是字符串、数字或元组，但不能是列表，因为列表是可变的</p><h3 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h3><p>集合（set）是一个无序的不重复元素序列<br> 集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作 可以使用大括号 <code>{ }</code> 创建集合，元素之间用逗号 <code>,</code> 分隔， 或者也可以使用 <code>set()</code> 函数创建集合，如下:</p><div class="language-py vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">basket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pear&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;banana&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(basket)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#{&#39;apple&#39;, &#39;pear&#39;, &#39;orange&#39;, &#39;banana&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>集合方法</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">add()</td><td style="text-align:left;">为集合添加元素</td></tr><tr><td style="text-align:left;">clear()</td><td style="text-align:left;">移除集合中的所有元素</td></tr><tr><td style="text-align:left;">copy()</td><td style="text-align:left;">拷贝一个集合</td></tr><tr><td style="text-align:left;">difference()</td><td style="text-align:left;">返回多个集合的差集</td></tr><tr><td style="text-align:left;">difference_update()</td><td style="text-align:left;">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td style="text-align:left;">discard()</td><td style="text-align:left;">删除集合中指定的元素</td></tr><tr><td style="text-align:left;">intersection()</td><td style="text-align:left;">返回集合的交集</td></tr><tr><td style="text-align:left;">intersection_update()</td><td style="text-align:left;">返回集合的交集。</td></tr><tr><td style="text-align:left;">isdisjoint()</td><td style="text-align:left;">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td style="text-align:left;">issubset()</td><td style="text-align:left;">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td style="text-align:left;">issuperset()</td><td style="text-align:left;">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td style="text-align:left;">pop()</td><td style="text-align:left;">随机移除元素</td></tr><tr><td style="text-align:left;">remove()</td><td style="text-align:left;">移除指定元素</td></tr><tr><td style="text-align:left;">symmetric_difference()</td><td style="text-align:left;">返回两个集合中不重复的元素集合。</td></tr><tr><td style="text-align:left;">symmetric_difference_update()</td><td style="text-align:left;">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td style="text-align:left;">union()</td><td style="text-align:left;">返回两个集合的并集</td></tr><tr><td style="text-align:left;">update()</td><td style="text-align:left;">给集合添加元素</td></tr></tbody></table><h2 id="数据类型判断-type" tabindex="-1">数据类型判断(type()) <a class="header-anchor" href="#数据类型判断-type" aria-label="Permalink to &quot;数据类型判断(type())&quot;">​</a></h2><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;int&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="python-数据类型转换" tabindex="-1">Python 数据类型转换 <a class="header-anchor" href="#python-数据类型转换" aria-label="Permalink to &quot;Python 数据类型转换&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">int(x [,base])</td><td style="text-align:left;">将 x 转换为一个整数</td></tr><tr><td style="text-align:left;">long(x [,base] )</td><td style="text-align:left;">将 x 转换为一个长整数</td></tr><tr><td style="text-align:left;">float(x)</td><td style="text-align:left;">将 x 转换为一个浮点数</td></tr><tr><td style="text-align:left;">complex(real [,imag])</td><td style="text-align:left;">创建一个复数</td></tr><tr><td style="text-align:left;">str(x)</td><td style="text-align:left;">将对象 x 转换为字符串</td></tr><tr><td style="text-align:left;">repr(x)</td><td style="text-align:left;">将对象 x 转换为表达式字符串</td></tr><tr><td style="text-align:left;">eval(str)</td><td style="text-align:left;">用来到计算在字符串中的有效 Python 表达式,并返回一个对象</td></tr><tr><td style="text-align:left;">tuple(s)</td><td style="text-align:left;">将序列 s 转换为一个元组</td></tr><tr><td style="text-align:left;">list(s)</td><td style="text-align:left;">将序列 s 转换为一个列表</td></tr><tr><td style="text-align:left;">set(s)</td><td style="text-align:left;">转换为可变集合</td></tr><tr><td style="text-align:left;">dict(d)</td><td style="text-align:left;">创建一个字典。d 必须是一个序列 (key,value)元组。</td></tr><tr><td style="text-align:left;">frozenset(s)</td><td style="text-align:left;">转换为不可变集合</td></tr><tr><td style="text-align:left;">chr(x)</td><td style="text-align:left;">将一个整数转换为一个字符</td></tr><tr><td style="text-align:left;">unichr(x)</td><td style="text-align:left;">将一个整数转换为 Unicode 字符</td></tr><tr><td style="text-align:left;">ord(x)</td><td style="text-align:left;">将一个字符转换为它的整数值</td></tr><tr><td style="text-align:left;">hex(x)</td><td style="text-align:left;">将一个整数转换为一个十六进制字符串</td></tr><tr><td style="text-align:left;">oct(x)</td><td style="text-align:left;">将一个整数转换为一个八进制字符串</td></tr></tbody></table>`,26),n=[a];function d(h,r,p,k,o,g){return s(),e("div",null,n)}const u=t(l,[["render",d]]);export{y as __pageData,u as default};
