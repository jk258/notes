import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.C-Bog4j8.js";const t="/notes/assets/1704608510816.BUIJsxDO.png",l="/notes/assets/1704608972434.Dr-RGD2i.png",p="/notes/assets/1704611510169.cX4-x6Xh.png",h="/notes/assets/1704619361270.ChGvwQtm.png",b=JSON.parse('{"title":"查询基础","description":"","frontmatter":{},"headers":[{"level":2,"title":"SELECT语句基础","slug":"select语句基础","link":"#select语句基础","children":[{"level":3,"title":"列的查询","slug":"列的查询","link":"#列的查询","children":[]},{"level":3,"title":"查询表中所有的列","slug":"查询表中所有的列","link":"#查询表中所有的列","children":[]},{"level":3,"title":"为列设定别名","slug":"为列设定别名","link":"#为列设定别名","children":[]},{"level":3,"title":"常数查询","slug":"常数查询","link":"#常数查询","children":[]},{"level":3,"title":"从结果中删除重复行","slug":"从结果中删除重复行","link":"#从结果中删除重复行","children":[]},{"level":3,"title":"根据 WHERE 语句来选择记录","slug":"根据-where-语句来选择记录","link":"#根据-where-语句来选择记录","children":[]}]},{"level":2,"title":"算术运算符和比较运算符","slug":"算术运算符和比较运算符","link":"#算术运算符和比较运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[{"level":4,"title":"不能对NULL使用比较运算符","slug":"不能对null使用比较运算符","link":"#不能对null使用比较运算符","children":[]}]}]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[{"level":3,"title":"NOT 运算符","slug":"not-运算符","link":"#not-运算符","children":[]},{"level":3,"title":"AND 运算符和 OR 运算符","slug":"and-运算符和-or-运算符","link":"#and-运算符和-or-运算符","children":[]},{"level":3,"title":"通过括号强化处理","slug":"通过括号强化处理","link":"#通过括号强化处理","children":[]},{"level":3,"title":"逻辑运算符和真值","slug":"逻辑运算符和真值","link":"#逻辑运算符和真值","children":[]}]}],"relativePath":"数据库/1-mysql/2-查询基础.md","filePath":"数据库/1-mysql/2-查询基础.md"}'),r={name:"数据库/1-mysql/2-查询基础.md"};function d(k,s,c,E,o,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="查询基础" tabindex="-1">查询基础 <a class="header-anchor" href="#查询基础" aria-label="Permalink to &quot;查询基础&quot;">​</a></h1><h2 id="select语句基础" tabindex="-1">SELECT语句基础 <a class="header-anchor" href="#select语句基础" aria-label="Permalink to &quot;SELECT语句基础&quot;">​</a></h2><h3 id="列的查询" tabindex="-1">列的查询 <a class="header-anchor" href="#列的查询" aria-label="Permalink to &quot;列的查询&quot;">​</a></h3><p>从表中选取数据时需要使用 <strong>SELECE语句</strong> ，也就是只从表中选出必要数据的意思。通过SELECT语句查询并选取出必要数据的过程称为<strong>匹配查询</strong> 或<strong>查询</strong>(query)。语法如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">列名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,······ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">表名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该 SELECT 语句包含了 SELECT 和 FROM 两个子句(clause)。子句时SQL语句的组成要素，是以 SELECT 或者 FROM 等作为起始的短语</p><p>SELECT 子句中列举了希望从表中查询出的列的名称，而 FROM 子句则指定了选取出数据的表的名称</p><p>例如，从表 Product 中取出 product_id , product_name , purchase_price</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id,product_name,purchase_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查询出的列的顺序可以任意指定。查询多列时，需要使用逗号进行分隔。<strong>查询结果中列的书讯和 SELECT 子句中的顺序相同</strong></p><h3 id="查询表中所有的列" tabindex="-1">查询表中所有的列 <a class="header-anchor" href="#查询表中所有的列" aria-label="Permalink to &quot;查询表中所有的列&quot;">​</a></h3><p>想要查询出全部列时，可以使用代表所有列的星号( * ),语法如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">表名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如，输出Product表中全部的列</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ps : 使用星号的时候，就无法设定列的显示顺序了。这时会按照 CREATE TABLE 语句的定义对列进行排序</p><h3 id="为列设定别名" tabindex="-1">为列设定别名 <a class="header-anchor" href="#为列设定别名" aria-label="Permalink to &quot;为列设定别名&quot;">​</a></h3><p>SQL 语句可以使用 <code>AS</code> 关键字为列设定别名。如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  product_id   	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	product_name 	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	purchase_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>执行结果如下：</p><p><img src="`+t+`" alt="1704608510816"></p><p>别名可以使用中文，使用中文时需要用双引号( &quot;&quot; )括起来,如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  product_id   	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;商品编号&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	product_name 	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;商品名称&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	purchase_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;进货单价&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="常数查询" tabindex="-1">常数查询 <a class="header-anchor" href="#常数查询" aria-label="Permalink to &quot;常数查询&quot;">​</a></h3><p>SELECT 子句中不仅可以书写列名，还可以书写常数，如下</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;商品&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">38</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2009-02-24&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id, product_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>执行结果如下</p><p><img src="`+l+`" alt="1704608972434"></p><h3 id="从结果中删除重复行" tabindex="-1">从结果中删除重复行 <a class="header-anchor" href="#从结果中删除重复行" aria-label="Permalink to &quot;从结果中删除重复行&quot;">​</a></h3><p>想要删除重复行时，可以通过在 SELECT 子句中使用 DISTINCT 来实现</p><p>如下，使用 DISTINCT 删除 product_type 列中重复的数据</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT DISTINCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在使用 DISTINCT 时，NULL 也被视为一类数据。NULL 存在于多行中时，也会被合并为一条 NULL 数据</p><h3 id="根据-where-语句来选择记录" tabindex="-1">根据 WHERE 语句来选择记录 <a class="header-anchor" href="#根据-where-语句来选择记录" aria-label="Permalink to &quot;根据 WHERE 语句来选择记录&quot;">​</a></h3><p>SELECT 语句通过 WHERE 子句来指定查询数据的条件。在 WHERE 子句中可以指定“某一列的值和这个字符串相等”或者“某一列的值大于这个数字”等条件。执行含有这些条件的 SELECT 语句，就可以查询出只符合该条件的记录了</p><p>语法如下：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">列名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,······</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">表名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">条件表达式</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如，选取 product_type 列为“衣服”的记录的 SELECT 语句为</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name,product_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;衣服&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>WHERER 子句中的 <code>product_type=&quot;衣服&quot;</code> 就是用来表示查询条件的表达式(条件表达式)。等号时比较两边的内容是否相等的符号，上述条件就是将 <code>product_type</code> 列的值和 &#39;衣服&#39; 进行比较，判断是否相等。Product 表的所有记录都会被进行比较。接下来会从查询出的记录中选取出 SELECT 语句指定的 product_name 列和 product_type 列</p><p>也就是<strong>首先通过 WHERE 子句查询出符合指定条件的记录，然后再选取出 SELECT 语句指定的列</strong></p><p>ps：SQL中子句的书写顺序是固定的，不能随意更改。WHERE 子句必须紧跟在 FROM 子句之后，书写顺序发生的话会造成执行错误</p><h2 id="算术运算符和比较运算符" tabindex="-1">算术运算符和比较运算符 <a class="header-anchor" href="#算术运算符和比较运算符" aria-label="Permalink to &quot;算术运算符和比较运算符&quot;">​</a></h2><h3 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h3><p>SQL 语句中可以使用计算表达式，例如，把各个商品单价的 2 倍 ( sale_price的2倍 ) 以“sale_price_x2”列的形式读取出来</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sale_price_x2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+p+`" alt="1704611510169"></p><p>sale_price_x2 列中的 sale_price * 2 就是计算销售单价的 2 倍的表达式</p><p>SQL语句中可以使用的四则运算的主要运算符</p><table tabindex="0"><thead><tr><th>含义</th><th>运算符</th></tr></thead><tbody><tr><td>加法运算</td><td>+</td></tr><tr><td>减法运算</td><td>-</td></tr><tr><td>乘法运算</td><td>*</td></tr><tr><td>除法运算</td><td>/</td></tr></tbody></table><p>四则运算所使用的 ( +、-、*、/ ) 称为算术运算符。运算符就是使用其两边的值进行四则运算或者字符串拼接、数值大小比较等运算，并放回结果的符号。加法运算符 ( + ) 前后如果是数字或者数字类型的列名的话，就会返回加法运算后的结果。SQL中除了算术运算符之外还有其他各种各样的运算符</p><p>当然，SQL 中也可以像平常的运算表达式那样使用 ( ) 。括号中运算表达式的优先级会得到提升，优先进行计算</p><p>ps : SQL 语句中进行运算时，需要特别注意含有 NULL 的运算。<strong>所有包含NULL的运算，结果肯定时NULL</strong></p><h3 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h3><p>像符号 = 这样用来比较其两边的列或者值的符号称为比较运算符，符号 = 就是比较运算符。在 WHERE 子句中通过使用比较运算符可以组合出各种各样的条件表达式，这些比较运算符可以对字符、数字和日期等几乎所有数据类型的列和值进行比较。</p><p>比较运算符</p><table tabindex="0"><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>和~相等</td></tr><tr><td>&lt;&gt;</td><td>和~不相等</td></tr><tr><td>&gt;=</td><td>大于等于~</td></tr><tr><td>&gt;</td><td>大于~</td></tr><tr><td>&gt;=</td><td>小于等于~</td></tr><tr><td>&gt;</td><td>小于~</td></tr></tbody></table><p>例如，选取出销售单价大于等于 1000 的记录</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name,product_type,sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>WHERE子句的条件表达式中也可以使用计算表达式</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, sale_price, purchase_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> purchase_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在字符串中比较的时候，使用是和数字比较不同的规则。典型的规则就是按照字典顺序进行比较，也就是像姓名那样，按照条目在字典中出现的顺序来进行排序。该挥着最重要的一点就是，以相同字符开头的单词比不同字符开头的单词更相近</p><p>以书籍的章节为例</p><pre><code>1
</code></pre><p>1-1    1-2    1-3    2    2-1    2-2    3</p><p>进行比较时，得 到的 结 果 是 &#39;1-3&#39; 比 &#39;2&#39; 小（&#39;1-3&#39; &lt; &#39;2&#39;），&#39;3&#39; 大于 &#39;2-2&#39;（&#39;3&#39; &gt; &#39;2&#39;）。</p><h4 id="不能对null使用比较运算符" tabindex="-1">不能对NULL使用比较运算符 <a class="header-anchor" href="#不能对null使用比较运算符" aria-label="Permalink to &quot;不能对NULL使用比较运算符&quot;">​</a></h4><p>对查询条件为 NULL 的数据，SQL 提供了专门用来判断是否为 <code>NULL</code> 的 <code>IS NULL</code> 运算符，反之，希望选取不是 NULL 的数据时，需要使用 <code>IS NOT NULL</code> 运算符</p><p>如下，选取 NULL 的记录</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, purchase_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> purchase_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><p>通过使用逻辑运算符，可以将多个查询条件组合</p><h3 id="not-运算符" tabindex="-1">NOT 运算符 <a class="header-anchor" href="#not-运算符" aria-label="Permalink to &quot;NOT 运算符&quot;">​</a></h3><p>NOT 不能单独使用，必须和其他查询条件组合起来使用</p><p>例如，查询销售单价小于1000的记录也可以这样表示</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, product_type, sale_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="and-运算符和-or-运算符" tabindex="-1">AND 运算符和 OR 运算符 <a class="header-anchor" href="#and-运算符和-or-运算符" aria-label="Permalink to &quot;AND 运算符和 OR 运算符&quot;">​</a></h3><p>在 WHERE 子句中使用 AND 运算符或者 OR 运算符，可以对多个查询条件进行组合</p><p>AND 运算符在两侧的查询条件都成立时整个查询条件才成立，其意思相当于“并且”</p><p>例如，选取出商品种类为厨房用具 ( product_type=&quot;厨房用具&quot; )，<strong>并且</strong>销售单价大于等于3000 ( sale_price &gt;=3000 )的商品</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, purchase_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;厨房用具&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>OR 运算符在其两侧的查询条件有一个成立时整个查询条件都成立，其意思相当于“或者”</p><p>例如，选取出商品种类为厨房用具 ( product_type=&quot;厨房用具&quot; )，<strong>或者</strong>销售单价大于等于3000 ( sale_price &gt;=3000 )的商品</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, purchase_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;厨房用具&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="通过括号强化处理" tabindex="-1">通过括号强化处理 <a class="header-anchor" href="#通过括号强化处理" aria-label="Permalink to &quot;通过括号强化处理&quot;">​</a></h3><p>通过使用括号让 OR 运算符先于 ADN 运算符执行</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, product_type, regist_date</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;办公用品&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( regist_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2009-09-11&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regist_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2009-09-20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="逻辑运算符和真值" tabindex="-1">逻辑运算符和真值 <a class="header-anchor" href="#逻辑运算符和真值" aria-label="Permalink to &quot;逻辑运算符和真值&quot;">​</a></h3><p>以上的三个运算符 NOT、AND、OR称为逻辑运算符，真值就是值为真 ( TRUE ) 或假 ( FALSE ) 其中之一的值</p><p>在使用逻辑运算符时，如果有 NULL 参与，会出现除真假之外的第三种值——不确定 ( UNKNOWN )。与通常的逻辑运算被称为二值逻辑相对，只有SQL中逻辑运算被称为三值运算</p><p>三至逻辑中 ADN 和 OR 真值表</p><p><img src="`+h+'" alt="1704619361270"></p>',92)]))}const y=i(r,[["render",d]]);export{b as __pageData,y as default};
