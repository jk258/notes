import{_ as n,c as s,o as e,ag as l}from"./chunks/framework.C-Bog4j8.js";const u=JSON.parse('{"title":"主要特征","description":"","frontmatter":{},"headers":[{"level":2,"title":"命名","slug":"命名","link":"#命名","children":[]},{"level":2,"title":"语言声明","slug":"语言声明","link":"#语言声明","children":[]},{"level":2,"title":"go编译问题","slug":"go编译问题","link":"#go编译问题","children":[]}],"relativePath":"go/01-基础/1-01主要特征.md","filePath":"go/01-基础/1-01主要特征.md"}'),i={name:"go/01-基础/1-01主要特征.md"};function p(o,a,c,t,r,d){return e(),s("div",null,a[0]||(a[0]=[l(`<h1 id="主要特征" tabindex="-1">主要特征 <a class="header-anchor" href="#主要特征" aria-label="Permalink to &quot;主要特征&quot;">​</a></h1><ul><li>自动立即回收</li><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理</li><li>匿名函数和闭包</li><li>类型和接口</li><li>并发编程</li><li>反射</li><li>语言交互性</li><li>go源码文件都是以<code>.go</code>结尾</li></ul><h2 id="命名" tabindex="-1">命名 <a class="header-anchor" href="#命名" aria-label="Permalink to &quot;命名&quot;">​</a></h2><ul><li>Go的函数、变量、常量、自定义类型、包(package)的命名方式遵循以下规则： <ul><li>首字符可以是任意的Unicode字符或者下划线</li><li>剩余字符可以是Unicode字符、下划线、数字</li><li>字符长度不限</li></ul></li><li>25个关键字<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>break        default      func         interface    select</span></span>
<span class="line"><span>case         defer        go           map          struct</span></span>
<span class="line"><span>chan         else         goto         package      switch</span></span>
<span class="line"><span>const        fallthrough  if           range        type</span></span>
<span class="line"><span>continue     for          import       return       var</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>37个保留字<div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Constants: true  false  iota  nil</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Types: int  int8  int16  int32  int64  </span></span>
<span class="line"><span>        uint  uint8  uint16  uint32  uint64  uintptr</span></span>
<span class="line"><span>        float32  float64  complex128  complex64</span></span>
<span class="line"><span>        bool  byte  rune  string  error</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Functions: make  len  cap  new  append  copy  close  delete</span></span>
<span class="line"><span>            complex  real  imag</span></span>
<span class="line"><span>            panic  recover</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li>可见性 <ul><li>声明在函数内部，是函数的本地值，类似private</li><li>声明在函数外部，是对当前包可见(包内所有.go文件都可见)的全局值，类似protect</li><li>声明在函数外部且首字母大写是所有包可见的全局值,类似public</li></ul></li></ul><h2 id="语言声明" tabindex="-1">语言声明 <a class="header-anchor" href="#语言声明" aria-label="Permalink to &quot;语言声明&quot;">​</a></h2><p>Go的程序是保存在多个.go文件中，文件的第一行就是<code>package XXX</code>声明，用来说明该文件属于哪个包(package)，package声明下来就是import声明，再下来是类型(<code>type</code>)，变量(<code>var</code>)，常量(<code>const</code>)，函数(<code>func</code>)的声明。</p><h2 id="go编译问题" tabindex="-1">go编译问题 <a class="header-anchor" href="#go编译问题" aria-label="Permalink to &quot;go编译问题&quot;">​</a></h2><p>golang的编译使用命令<code>go build</code> , <code>go install</code>;除非仅写一个main函数，否则还是准备好目录结构； <code>GOPATH</code>=工程根目录；其下应创建<code>src</code>，<code>pkg</code>，<code>bin</code>目录，<code>bin</code>目录中用于生成可执行文件，pkg目录中用于生成.a文件； golang中的<code>import name</code>，实际是到GOPATH中去寻找<code>name.a</code>, 使用时是该<code>name.a</code>的源码中生命的package 名字。<br> PS:</p><ol><li><p>系统编译时 <code>go install abc_name</code>时，系统会到GOPATH的src目录中寻找<code>abc_name</code>目录，然后编译其下的go文件；</p></li><li><p>同一个目录中所有的go文件的package声明必须相同，所以main方法要单独放一个文件，否则在eclipse和liteide中都会报错；<br> 编译报错如下：（假设test目录中有个main.go 和mymath.go,其中main.go声明package为main，mymath.go声明packag 为test);</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">can</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;t load package: package test: found packages main (main.go) and test (mymath.go) in /home/wanjm/go/src/test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">报错说 不能加载package test（这是命令行的参数），因为发现了两个package，分别时main.go 和 mymath.go;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>对于main方法，只能在bin目录下运行 <code>go build path_tomain.go</code>; 可以用<code>-o</code>参数指出输出文件名；</p></li><li><p>可以添加参数 <code>go build -gcflags &quot;-N -l&quot; ****</code>,可以更好的便于gdb；详细参见 <a href="http://golang.org/doc/gdb" target="_blank" rel="noreferrer">http://golang.org/doc/gdb</a></p></li><li><p>gdb全局变量主一点。 如有全局变量 a；则应写为 p &#39;main.a&#39;；注意但引号不可少；</p></li></ol>`,9)]))}const b=n(i,[["render",p]]);export{u as __pageData,b as default};
