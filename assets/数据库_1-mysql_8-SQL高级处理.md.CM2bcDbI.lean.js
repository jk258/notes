import{_ as i,o as a,c as n,a2 as l}from"./chunks/framework.DaWjvruP.js";const g=JSON.parse('{"title":"SQL高级处理","description":"","frontmatter":{},"headers":[{"level":2,"title":"窗口函数","slug":"窗口函数","link":"#窗口函数","children":[{"level":3,"title":"语法的基本使用方法——使用RANK函数","slug":"语法的基本使用方法——使用rank函数","link":"#语法的基本使用方法——使用rank函数","children":[]},{"level":3,"title":"专用窗口函数的种类","slug":"专用窗口函数的种类","link":"#专用窗口函数的种类","children":[]},{"level":3,"title":"窗口函数的使用范围","slug":"窗口函数的使用范围","link":"#窗口函数的使用范围","children":[]},{"level":3,"title":"作为窗口函数使用的聚合函数","slug":"作为窗口函数使用的聚合函数","link":"#作为窗口函数使用的聚合函数","children":[]},{"level":3,"title":"计算移动平均","slug":"计算移动平均","link":"#计算移动平均","children":[]}]},{"level":2,"title":"GROUPING运算符","slug":"grouping运算符","link":"#grouping运算符","children":[]},{"level":2,"title":"同时得到合计行","slug":"同时得到合计行","link":"#同时得到合计行","children":[{"level":3,"title":"ROLLUP——同时得出合计和小计","slug":"rollup——同时得出合计和小计","link":"#rollup——同时得出合计和小计","children":[]},{"level":3,"title":"GROUPING函数——让NULL更加容易分辨","slug":"grouping函数——让null更加容易分辨","link":"#grouping函数——让null更加容易分辨","children":[]},{"level":3,"title":"CUBE 用数据来搭积木","slug":"cube-用数据来搭积木","link":"#cube-用数据来搭积木","children":[]},{"level":3,"title":"GROUPING SETS ——取得期望的积木","slug":"grouping-sets-——取得期望的积木","link":"#grouping-sets-——取得期望的积木","children":[]}]}],"relativePath":"数据库/1-mysql/8-SQL高级处理.md","filePath":"数据库/1-mysql/8-SQL高级处理.md"}'),p={name:"数据库/1-mysql/8-SQL高级处理.md"};function e(h,s,t,k,r,d){return a(),n("div",null,s[0]||(s[0]=[l(`<h1 id="sql高级处理" tabindex="-1">SQL高级处理 <a class="header-anchor" href="#sql高级处理" aria-label="Permalink to &quot;SQL高级处理&quot;">​</a></h1><h2 id="窗口函数" tabindex="-1">窗口函数 <a class="header-anchor" href="#窗口函数" aria-label="Permalink to &quot;窗口函数&quot;">​</a></h2><p>窗口函数也称为 OLAP 函数。OLAP 时 OnLine Analytical Processing 的简称，意思时对数据库数据进行实时分析处理。例如，市场分析、创建财务报表、创建计划等日常性商务工作</p><p>窗口函数语法：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;窗口函数&gt; OVER ([PARTITION BY &lt;列清单&gt;])</span></span>
<span class="line"><span>	ORDER BY &lt;排序用列清单&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中重要的关键字时 PARTITION BY 和 ORDER BY</p><p>窗口函数答题可以分为以下两种：</p><ul><li>能够作为窗口函数的聚合函数 ( SUM、AVG、COUNT、MAX、MIN )</li><li>RANK、DENSE_RANK、ROW_NUMBER等专用窗口函数</li></ul><p>ps：在mysql中，窗口函数是从8.0开始引进的</p><h3 id="语法的基本使用方法——使用rank函数" tabindex="-1">语法的基本使用方法——使用RANK函数 <a class="header-anchor" href="#语法的基本使用方法——使用rank函数" aria-label="Permalink to &quot;语法的基本使用方法——使用RANK函数&quot;">​</a></h3><p>如其名称所示，RANK时用来计算记录排序的函数</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, product_type, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ranking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>PARTITION BY 能够设定排序的对象范围。本例中，为了按照商品种类进行排序，我们指定了 product_type</p><p>ORDER BY 能够指定按照哪一列、何种顺序进行排序。为了按照销售单价的升序进行排列，我们指定了 sale_price。此外窗口函数中的 ORDER BY 于 SELECT语句末尾的 ORDER BY 一样，可以通过关键字 ASC/DESC 来指定升序和降序。省略该关键字时会默认按照ASC，也就是升序进行排序。</p><p>窗口函数兼具 ROUP BY 子句的分组功能以及 ORDER BY 子句的排序功能。但是，PARTITION BY 子句并不具备 GROUP BY 子句的汇总功能。</p><p>通过 PARTITION BY 分组后的记录集合称为“窗口”</p><p>使用窗口函数时起到关键作用的是 PARTITION BY 和 GROUP BY。其中，PARTITION BY 并不是必须的，即使不指定也可以正常使用窗口函数。如下：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_name, product_type, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ranking</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="专用窗口函数的种类" tabindex="-1">专用窗口函数的种类 <a class="header-anchor" href="#专用窗口函数的种类" aria-label="Permalink to &quot;专用窗口函数的种类&quot;">​</a></h3><ul><li>RANK函数：计算排序时，如果存在相同位次的记录，则会跳过之后的位次</li><li>DENSE_RANK函数：同样时计算排序，即使存在相同位次的记录，也不会跳过之后的位次</li><li>ROW_NUMBER函数：赋予唯一的连续位次</li></ul><h3 id="窗口函数的使用范围" tabindex="-1">窗口函数的使用范围 <a class="header-anchor" href="#窗口函数的使用范围" aria-label="Permalink to &quot;窗口函数的使用范围&quot;">​</a></h3><p>窗口函数只能书写在一个特定的位置。这个位置就是 SELECT 子句之中。反过来说，就是这类函数不能在 WHERE 子句或者 FROUP BY 子句中使用</p><h3 id="作为窗口函数使用的聚合函数" tabindex="-1">作为窗口函数使用的聚合函数 <a class="header-anchor" href="#作为窗口函数使用的聚合函数" aria-label="Permalink to &quot;作为窗口函数使用的聚合函数&quot;">​</a></h3><p>所有的聚合函数都能用坐窗口函数，其语法和专用窗口函数完全相同。如下：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id, product_name, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> current_sum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="计算移动平均" tabindex="-1">计算移动平均 <a class="header-anchor" href="#计算移动平均" aria-label="Permalink to &quot;计算移动平均&quot;">​</a></h3><p>窗口函数就是将表以窗口为单位进行分割，并在其中进行排序的函数。其实其中还包含在窗口中指定更加详细的汇总范围的备选功能，该备选功能中的汇总范围称为框架</p><p>指定“最靠近的 3 行”作为汇总对象</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id, product_name, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROWS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRECEDING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moving_avg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>指定框架（汇总范围），由于框架时分局当前记录来确定的，因此和固定的窗口不同，其范围会随着当前记录的变化而变化，这样的统计方法称为移动平均（moving average）。这种方法在希望实时把握“最近状态”时非常方便</li><li>将当前记录的前后行作为汇总对象<div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id, product_name, sale_price,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRECEDING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOLLOWING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moving_avg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>ps：将聚合函数作为窗口函数使用时，会以当前记录为基准来决定汇总对象的记录</p><h2 id="grouping运算符" tabindex="-1">GROUPING运算符 <a class="header-anchor" href="#grouping运算符" aria-label="Permalink to &quot;GROUPING运算符&quot;">​</a></h2><h2 id="同时得到合计行" tabindex="-1">同时得到合计行 <a class="header-anchor" href="#同时得到合计行" aria-label="Permalink to &quot;同时得到合计行&quot;">​</a></h2><p>分别计算出合计行和按照商品种类汇总的结果，然后通过 UNION ALL连接在一起</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;合计&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UNION ALL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="rollup——同时得出合计和小计" tabindex="-1">ROLLUP——同时得出合计和小计 <a class="header-anchor" href="#rollup——同时得出合计和小计" aria-label="Permalink to &quot;ROLLUP——同时得出合计和小计&quot;">​</a></h3><p>GROUPING运算符包含以下3种</p><ul><li>ROLLUP</li><li>CUBE</li><li>GROUPING SETS</li></ul><p>ROLLUP的使用方法</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GROUP BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLLUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- mysql</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLLUP</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> -- 超级分组记录默认使用 NULL 作为聚合键</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>将“登记日期”添加到聚合键中</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,regist_date,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,regist_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WITH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLLUP</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这时，会发现使用 ROLLUP 时多出了一个合计行和不同商品种类的小计行</p><h3 id="grouping函数——让null更加容易分辨" tabindex="-1">GROUPING函数——让NULL更加容易分辨 <a class="header-anchor" href="#grouping函数——让null更加容易分辨" aria-label="Permalink to &quot;GROUPING函数——让NULL更加容易分辨&quot;">​</a></h3><p>SQL 提供了一个用来判断超级分组记录的 NULL 的特定函数 —— GROUPING 函数。该函数在其参数列的值为超级分组记录所产生的 NULL 时返回1，其他情况返回 0</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regist_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regist_date, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GROUP BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ROLLUP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type, regist_date);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="cube-用数据来搭积木" tabindex="-1">CUBE 用数据来搭积木 <a class="header-anchor" href="#cube-用数据来搭积木" aria-label="Permalink to &quot;CUBE 用数据来搭积木&quot;">​</a></h3><p>所谓 CUBE，就是将 GROUP BY 子句中聚合键的“所有可能的组合”的汇总结果集合到一个结果中。因此，组合的个数就是 2 <code>&lt;sup&gt;</code>n <code>&lt;/sup&gt;</code>（n 是聚合键的个数）</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;商品种类 合计&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ELSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regist_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;登记日期 合计&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ELSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CAST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regist_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regist_date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GROUP BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CUBE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type, regist_date);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="grouping-sets-——取得期望的积木" tabindex="-1">GROUPING SETS ——取得期望的积木 <a class="header-anchor" href="#grouping-sets-——取得期望的积木" aria-label="Permalink to &quot;GROUPING SETS ——取得期望的积木&quot;">​</a></h3><p>GROUPING SETS可以用于从 ROLLUP 或者 CUBE 的结果中取出部分记录</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(product_type) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;商品种类 合计&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ELSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product_type,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GROUPING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regist_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;登记日期 合计&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ELSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CAST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regist_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regist_date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sale_price) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum_price</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GROUPING </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SETS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (product_type, regist_date);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,52)]))}const c=i(p,[["render",e]]);export{g as __pageData,c as default};
