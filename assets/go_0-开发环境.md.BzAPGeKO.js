import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.C-Bog4j8.js";const n="/notes/assets/variable.C2NHxSgR.png",g=JSON.parse('{"title":"开发环境","description":"","frontmatter":{},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"使用g进行版本管理","slug":"使用g进行版本管理","link":"#使用g进行版本管理","children":[{"level":3,"title":"设置环境变量","slug":"设置环境变量","link":"#设置环境变量","children":[]},{"level":3,"title":"g的使用","slug":"g的使用","link":"#g的使用","children":[]}]},{"level":2,"title":"设置GOPATH","slug":"设置gopath","link":"#设置gopath","children":[]},{"level":2,"title":"设置国内代理","slug":"设置国内代理","link":"#设置国内代理","children":[]},{"level":2,"title":"编辑器 vscode","slug":"编辑器-vscode","link":"#编辑器-vscode","children":[]},{"level":2,"title":"第一个项目","slug":"第一个项目","link":"#第一个项目","children":[]}],"relativePath":"go/0-开发环境.md","filePath":"go/0-开发环境.md"}'),t={name:"go/0-开发环境.md"};function h(p,s,o,d,r,c){return e(),a("div",null,s[0]||(s[0]=[l('<h1 id="开发环境" tabindex="-1">开发环境 <a class="header-anchor" href="#开发环境" aria-label="Permalink to &quot;开发环境&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>下载地址：<a href="https://go.dev/dl/" target="_blank" rel="noreferrer">https://go.dev/dl/</a></p><ul><li>windows：双击下载后的文件安装即可</li></ul><h2 id="使用g进行版本管理" tabindex="-1">使用g进行版本管理 <a class="header-anchor" href="#使用g进行版本管理" aria-label="Permalink to &quot;使用g进行版本管理&quot;">​</a></h2><p>在<a href="https://github.com/voidint/g/releases" target="_blank" rel="noreferrer">https://github.com/voidint/g/releases</a>下载安装</p><h3 id="设置环境变量" tabindex="-1">设置环境变量 <a class="header-anchor" href="#设置环境变量" aria-label="Permalink to &quot;设置环境变量&quot;">​</a></h3><ul><li>下载镜像：G_MIRROR=<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">https://golang.google.cn/dl/</a></li><li>g的工作空间: G_HOME=g.exe所在目录</li><li>go 文件夹：GOROOT=%G_HOME%\\go，将<code>%GOROOT%\\bin</code>添加到<code>Path</code>中</li><li>G_EXPERIMENTAL=true(下载的 go 就会存放在 g.exe 的同级目录中了，否则 go 默认下载到系统盘)<br><img src="'+n+`" alt="设置环境变量"></li></ul><h3 id="g的使用" tabindex="-1">g的使用 <a class="header-anchor" href="#g的使用" aria-label="Permalink to &quot;g的使用&quot;">​</a></h3><ul><li><code>g ls-remote</code>： 列出远程仓库的版本</li><li><code>g ls-remote stable</code>： 列出<code>stable</code>(稳定)状态的版本</li><li><code>g install xxx</code>： 安装指定版本的go</li><li><code>g use xxx</code>：切换到指定版本的go</li><li><code>g ls</code>： 列出当前g管理的版本</li></ul><h2 id="设置gopath" tabindex="-1">设置GOPATH <a class="header-anchor" href="#设置gopath" aria-label="Permalink to &quot;设置GOPATH&quot;">​</a></h2><p><code>GOPATH</code>是一个环境变量，用来表明你写的go项目的存放路径<br> ps: 从 Go 1.11 版本开始，Go 引入了 go modules，这是一种新的依赖管理工具，它允许开发者在任何地方管理依赖，不再强制要求设置 GOPATH</p><ul><li>linux/maxos<div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GOPATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/your/workspace</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH:$GOPATH/bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>window<br> 同上<strong>设置环境变量</strong>，<code>GOPATH=/path/to/your/workspace</code>，并把将<code>%GOPATH%\\bin</code>添加到<code>Path</code>中</li></ul><p>在GOPATH目录下，通常有 3 个子目录：src、bin和pkg</p><ul><li>src：用于存放go语言的源代码文件</li><li>bin：用于存放可执行文件</li><li>pkg：用于存放编译后的包文件(.a文件)</li></ul><h2 id="设置国内代理" tabindex="-1">设置国内代理 <a class="header-anchor" href="#设置国内代理" aria-label="Permalink to &quot;设置国内代理&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GOPROXY=https://goproxy.cn,direct</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="编辑器-vscode" tabindex="-1">编辑器 vscode <a class="header-anchor" href="#编辑器-vscode" aria-label="Permalink to &quot;编辑器 vscode&quot;">​</a></h2><ul><li>选择插件，搜索<code>go</code>，安装<code>go</code>插件</li><li>安装Go语言开发工具包。Windows平台按下<code>Ctrl+Shift+P</code>,在输入框中输入<code>&gt;go:install</code>,选择<code>Go:Install/Update Tools</code>命令并执行，选中出现的工具，点击确定</li></ul><h2 id="第一个项目" tabindex="-1">第一个项目 <a class="header-anchor" href="#第一个项目" aria-label="Permalink to &quot;第一个项目&quot;">​</a></h2><p>进入<code>GOPATH/src</code>目录，新建<code>hello</code>目录，在<code>hello</code>目录中创建一个<code>main.go</code>文件:</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 声明 main 包，表明当前是一个可执行程序</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 导入内置 fmt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main函数，是程序执行的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World1!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在终端打印 Hello World!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在hello目录下执行：<code>go build</code><br> go编译器会去 <code>GOPATH</code>的<code>src</code>目录下查找你要编译的<code>hello</code>项目<br> 编译得到的可执行文件会保存在执行编译命令的当前目录下，如果是windows平台会在当前目录下找到<code>hello.exe</code>可执行文件。<br> PS：如果执行<code>go build</code>报错，需要执行</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GO111MODULE=on</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 确认GO111MODULE开关是否开启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 产生一个空的go.mod文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在终端直接执行该<code>hello.exe</code>文件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PS D:\\goproject\\src\\hello&gt; ./hello.exe</span></span>
<span class="line"><span>Hello World!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>我们还可以使用-o参数来指定编译后可执行文件的名字。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heiheihei.exe</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,28)]))}const u=i(t,[["render",h]]);export{g as __pageData,u as default};
